// Clase Util para la tabla de Adm_requisito
package adm.documento.spring;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class AdmRequisitoDao{
	
	@Autowired
	@Qualifier("jdbcSalomon")
	private JdbcTemplate salomonJdbc;
	
	public boolean insertReg(AdmRequisito adm ){
		boolean ok = false;		
		try{
			String comando = "INSERT INTO SALOMON.ADM_REQUISITO"+
				" (CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES)"+
				" VALUES( ?, TO_NUMBER(?,'99'),?,?,?,?,?,?,?)";
			Object[] parametros = new Object[] {
					adm.getCarreraId(), adm.getDocumentoId(), adm.getModalidades(), adm.getAutorizar(), adm.getRequerido(),
					adm.getNiveles(), adm.getTipos(), adm.getNacionalidades(), adm.getEstadosCiviles()};
			if (salomonJdbc.update(comando,parametros)==1){
				ok = true;
			}			
		}catch(Exception ex){
			System.out.println("Error - adm.documento.spring.AdmRequisito|insertReg|:"+ex);
		}
		return ok;
	}
			
	public boolean updateReg(AdmRequisito adm ) {
		boolean ok = false;
		
		try{
			String comando = "UPDATE SALOMON.ADM_REQUISITO SET MODALIDADES = ?, AUTORIZAR = ?, REQUERIDO = ?, NIVELES = ?, TIPOS = ?, NACIONALIDADES = ?, ESTADOS_CIVILES = ?"+
				" WHERE CARRERA_ID = ?" +
				" AND DOCUMENTO_ID = TO_NUMBER(?,'99')";		
			Object[] parametros = new Object[] {
					adm.getModalidades(), adm.getAutorizar(), adm.getRequerido(), adm.getNiveles(), adm.getTipos(), adm.getNacionalidades(), adm.getEstadosCiviles(), adm.getCarreraId(), adm.getDocumentoId()};
			if (salomonJdbc.update(comando,parametros)==1){
				ok = true;
			}	
			
		}catch(Exception ex){
			System.out.println("Error - aca.documento.spring.AdmRequisito|updateReg|:"+ex);			
		
		}
		return ok;
	}	
	
	public boolean deleteReg(String carreraId, String documentoId) {
		boolean ok = false;
		
		try{
			String comando = "DELETE FROM  SALOMON.ADM_REQUISITO"+
				" WHERE CARRERA_ID = ?" +
				" AND DOCUMENTO_ID = TO_NUMBER(?,'99')";
			Object[] parametros = new Object[]{carreraId, documentoId};
			if (salomonJdbc.queryForObject(comando,Integer.class, parametros) >= 1){
				ok = true;
			}
			
		}catch(Exception ex){
			System.out.println("Error - aca.documento.spring.AdmRequisito|deleteReg|:"+ex);
			ok = false;
		
		}
				
		return ok;
	}
	
	public AdmRequisito mapeaRegId( String carreraId, String documentoId ) {
		AdmRequisito objeto = new AdmRequisito();
	
		try{
			String comando = "SELECT SELECT CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES FROM SALOMON.ADM_REQUISITO WHERE CARRERA_ID = ? AND DOCUMENTO_ID = TO_NUMBER(?, '99')";
			Object[] parametros = new Object[] {carreraId, documentoId};
			objeto = salomonJdbc.queryForObject(comando, new AdmRequisitoMapper(), parametros);
		}catch(Exception ex){
			System.out.println("Error - aca.documento.spring.AdmRequisito|mapeaRegId|:"+ex);
			ex.printStackTrace();
		}
		
		return objeto;
	}
	
	public boolean existeReg(String carreraId, String documentoId) {
		boolean 		ok 	= false;		
		try{
			String comando = "SELECT COUNT(*) FROM SALOMON.ADM_REQUISITO WHERE CARRERA_ID = ? AND DOCUMENTO_ID = TO_NUMBER(?,'99')";
			Object[] parametros = new Object[] {carreraId, documentoId};
			if (salomonJdbc.queryForObject(comando,Integer.class, parametros)>=1){
				ok = true;
			}			
		}catch(Exception ex){
			System.out.println("Error - aca.documento.spring.AdmRequisito|existeReg|:"+ex);
		}		
		return ok;
	}
	
		
	public List<AdmRequisito> getListAll(String orden ) {
		
		List<AdmRequisito> lista	= new ArrayList<AdmRequisito>();		
		try{ 
			String comando = "SELECT CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES FROM SALOMON.ADM_REQUISITO "+ orden;
			lista = salomonJdbc.query(comando, new AdmRequisitoMapper());			
		}catch(Exception ex){
			System.out.println("Error - adm.documento.spring.AdmRequisito|getListAll|:"+ex);		
		}
		
		return lista;
	}
	
	public List<AdmRequisito> getLista( String carreraId, String orden ) {
		
		List<AdmRequisito> lista	= new ArrayList<AdmRequisito>();		
		try{
			String comando = "SELECT CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES FROM SALOMON.ADM_REQUISITO"+
				" WHERE CARRERA_ID = ? " + orden;
			Object[] parametros = new Object[] {carreraId};
			lista = salomonJdbc.query(comando, new AdmRequisitoMapper(), parametros);			
		}catch(Exception ex){
			System.out.println("Error - adm.documento.spring.AdmRequisito|getLista|:"+ex);		
		}
		
		return lista;
	}

	public List<AdmRequisito> getListaRequisitos(String carreraId, String modalidad, String nivel, String tipo, String tipoAplicante, String estadoCivil, String orden ) {
		
		List<AdmRequisito> lista	= new ArrayList<AdmRequisito>();		
		try{
			String comando =  "SELECT CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES FROM SALOMON.ADM_REQUISITO" 
							+ " WHERE CARRERA_ID = ? AND MODALIDADES LIKE ?"
							+ " AND NIVELES LIKE ? AND TIPOS LIKE ? AND NACIONALIDADES LIKE ? AND ESTADOS_CIVILES LIKE ?" + orden;
			Object[] parametros = new Object[] {carreraId, "%" + modalidad + "%", "%" + nivel + "%", "%" + tipo + "%", "%" + tipoAplicante + "%", "%" + estadoCivil + "%" };
			lista = salomonJdbc.query(comando, new AdmRequisitoMapper(), parametros);			
		}catch(Exception ex){
			System.out.println("Error - adm.documento.spring.AdmRequisito|getListaRequisitos|:"+ex);		
		}
		
		return lista;
	}
	
	public HashMap<String,AdmRequisito> getMapAll( String orden ) {
		
		HashMap<String,AdmRequisito> mapa = new HashMap<String,AdmRequisito>();
		List<AdmRequisito> lista	= new ArrayList<AdmRequisito>();
		
		String llave				= "";
		
		try{
			String comando = "SELECT CARRERA_ID, DOCUMENTO_ID, MODALIDADES, AUTORIZAR, REQUERIDO, NIVELES, TIPOS, NACIONALIDADES, ESTADOS_CIVILES FROM SALOMON.ADM_REQUISITO "+ orden;
			lista = salomonJdbc.query(comando, new AdmRequisitoMapper());
			for (AdmRequisito requisito : lista){
				llave = requisito.getCarreraId()+requisito.getDocumentoId() ;
				mapa.put(llave, requisito);
			}			
		}catch(Exception ex){
			System.out.println("Error - adm.documento.spring.AdmRequisito|getMapAll|:"+ex);
	
		}		
		return mapa;
	}
	
}